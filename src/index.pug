doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title HTTPS deployment

		link(rel='stylesheet', type='text/css', href='build/build.css')

	body

		article.deck

			section
				h1 HTTPS deployment
				p Alternate title: "HTTPS is a shitshow"

			section
				h2 AJ
				h3 he/him
				h3 Winter 2 batch
				h3 Security/privacy nerd

			section(data-bespoke-hash='covering')
				h2 What we're covering
				h3 tl;dr: how HTTPS works + what to do for optimal security
				ul
					li Basics
					li Authenticity
					li Cipher suites
					li Revocation
					li Performance
					li Implementation

			section(data-bespoke-hash='not-covering')
				h2 What we're <strong>not</strong> covering
				ul
					li
						a(href='https://strugee.net/presentation-security-design/') System-level stuff
					li
						a(href='https://strugee.net/presentation-webapp-security/') Webapp stuff
					li
						a(href='https://strugee.net/presentation-operational-security/') Operational security
					li Cryptography (beyond the basics)
					li UX issues

			section
				h2 Terminology
				h3 HTTPS
				h3 SSL / TLS
				h3 Key
				h3 Public key / private keys
				h3 TLS handshake
				h3 SSL termination

			section
				h2 Attack types
				h3 Passive attack
				h3 Active attack (man-in-the-middle attack)

			section
				h2 Three important crypto properties
				h3 Confidentiality (is my PayPal session secret)
				h3 Integrity (can anybody mess with the PayPal HTML)
				h3 Authenticity (am I talking to the real <code>paypal.com</code>)
				
			section
				h2 Confidentiality + integrity:
				h3 Just math (mostly)

			section
				h2 Authenticity
				h3 Certificate Authorities + the CA system
				h3 CAs are trusted entities responsible for providing trust
				h3 Certificates bind a domain name to a keypair
				h3 Chains of trust: site certificate -> intermediate CA -> intermediate CA -> root CA
				h3 Demo

			section
				h2 Problems
				h3 CAs can be and are compromised
				h3 CAs are vulnerable to government requests
				h3 CAs are just generally sketchy, because why not
				h3 #[em Any] CA can issue a certificate
				h3 Only as strong as the weakest link
				h3 Demo

			section
				iframe(width='560', height='315', src='https://www.youtube.com/embed/8N4sb-SEpcg?rel=0&start=913&end=992', frameborder='0', allowfullscreen)

			section
				//- TODO links
				h2 Solutions?
				h3 DNSSEC + DANE
				h3 CAA DNS records
				h3 Convergence
				h3 Certificate Transparency
				h3 HTTP Public Key Pinning

			section
				h2 Cipher suites
				h3 Different algorithms for encrypting data
				h3 Certain suites are better than others
				h3 Certain suites <strong>must</strong> be disabled
				h3 Security/compatibility balance

			section
				h2 Picking cipher suites
				h3 Easiest: <a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Mozilla's configuration generator</a>
				h3 Otherwise prefer suites using ECDHE, disable <a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Mandatory_discards">weak cipher suites</a>

			section
				h2 (Perfect) Forward Secrecy
				h3 Ensures communication confidentiality even in the face of key compromise
				h3 Negotiate a shared key that doesn't hit the wire and is discarded when the session ends
				h3 Cipher suites with ECDHE negotiation
			section
				h2 Revocation
				h3 "This certificate is no longer valid"
				h3 CRLs
				h3 OCSP

			section
				h2 CRLs
				h3 Certificate Revocation Lists
				h3 Too much bandwidth/disk space
				h3 Don't scale well in catastrophic situations (e.g. Heartbleed)
				h3 CRLSet/OneCRL

			section
				h2 OCSP
				h3 Online Certificate Status Protocol
				h3 Realtime query for revocation status
				h3 Certificates include OCSP responder URLs
				h3 OCSP responders return signed certificate status assertions

			section
				h2 OCSP problems
				h3 Leaks browsing history to CAs
				h3 Induces high load on CAs
				h3 OCSP responders are unreliable
				h3 UAs can't hard-fail

			section
				h2 OCSP stapling
				h3 Servers query OCSP responder servers
				h3 Signed OCSP response is sent along with the certificate
				h3 OCSP Must-Staple

			section
				h2 Performance
				quote TLS has exactly one performance problem: it is not used widely enough. <i>Everything else can be optimized.</i>
				cite
					a(href="https://istlsfastyet.com/") istlsfastyet.com

			section
				h2 Optimizing TLS handshakes
				h3 Mostly eliminating round-trips
				h3 TLS session resumption (session ids, client sends id and server queries cache)
				h3 TLS session tickets (client sends connection state encrypted to server's key; be careful about PFS)
				h3 TLS False Start (timing modification)

			section
				h2 More optimizations
				h3 Dual RSA/EC certificate deployments
				h3 #[a(href="https://istlsfastyet.com/") istlsfastyet.com]

			section
				h2 Dispelling myths
				h3 TLS is not computationally expensive
				quote In order to [deploy HTTPS on Gmail] we had to deploy <em>no additional machines</em> and <em>no special hardware</em>. On our production frontend machines, SSL/TLS accounts for less than 1% of the CPU load, less than 10KB of memory per connection and less than 2% of network overhead.
				cite <a href="https://www.imperialviolet.org/2010/06/25/overclocking-ssl.html">Adam Langley</a> of Google
				h3 TLS is also <a href="https://letsencrypt.org">not monetarily expensive</a>
				h3 We really do want all of the web using HTTPS

			section
				h2 Implementing - Mixed Content
				h3 HTTP content in an HTTPS page
				h3 Active Mixed Content is blocked
				h3 Passive Mixed Content is allowed (for now)

			section
				h2 #[code upgrade-insecure-requests]
				h3 #[a(href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests") Content Security Policy directive]
				h3 Client support indicated by #[a(href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade-Insecure-Requests") #[code Upgrade-Insecure-Requests]] header

			section
				h2 #[code block-all-mixed-content]
				h3 #[a(href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content") Content Security Policy directive]
				h3 No-op when used with #[code upgrade-insecure-requests]

			section
				h2 HTTP Strict Transport Security
				h3 "Never connect to this website insecurely"
				h3 #[code Strict-Transport-Security] header
				h3 Set long durations (eventually)
				h3 #[code includeSubdomains]
				h3 Preloading to mitigate first-use attacks

			section
				h2 HTTP Public Key Pinning
				h3 "Require these fingerprints in the trust chain"
				h3 Mitigates misissuance
				h3 You <em>can</em> set it to leaf certs but you gotta be careful
				h3 Pinning intermediate certs is easier
				h3 Suffers from first-use attacks

			section
				h2 Server Name Indication (SNI)
				h3 "I'm initiating a connection to this domain name"
				h3 Lets the server present the right certificate
				h3 Eliminates the use of multiple IPs
				h3 All modern clients support this

			section
				h2 Rough order
				ol
					li Make HTTPS available
					li Fix Mixed Content
					li Redirect HTTP -> HTTPS (use permanent redirects)
					li HTTP Strict Transport Security
					li Fix your cipher suites
					li HSTS preload list
					li OCSP Stapling
					li OCSP Must-Staple
					li HTTP Public Key Pinning

			section
				h2 Tools
				h3 #[a(href="https://www.ssllabs.com/ssltest/index.html") SSL Labs]
				h3 #[a(href="https://letsencrypt.org") Let's Encrypt]
				h3 #[a(href="https://certbot.eff.org/") Certbot]
				h3 #[a(href="https://caddyserver.com/") Caddy]

			section
				h2 Thanks!
				h3 Y'all have stamina
				h3 Questions?

			section
				h2 Access this presentation again
				h3
					a(href='https://strugee.net/presentation-https-deployment') https://strugee.net/presentation-https-deployment
				h3 Or get the 
					a(href='https://github.com/strugee/presentation-https-deployment') source code

		script(src='build/build.js')
